import java.util.ArrayList;

public class ListGraph {
    ArrayList<ArrayList<Integer>> graph;
    int vertices;

    ListGraph(int vertices) {
        this.vertices = vertices;
        graph = new ArrayList<>();
        for (int i = 0; i < vertices; i++) {
            graph.add(new ArrayList<>());
        }
    }

    void addEdge(int src, int dest) {
        if (isValid(src, dest) && src != dest && !graph.get(src).contains(dest)) {
            graph.get(src).add(dest);
            graph.get(dest).add(src); // Undirected graph
        }
    }

    void removeEdge(int src, int dest) {
        if (isValid(src, dest)) {
            graph.get(src).remove(Integer.valueOf(dest));
            graph.get(dest).remove(Integer.valueOf(src));
        }
    }

    boolean hasEdge(int src, int dest) {
        return isValid(src, dest) && graph.get(src).contains(dest);
    }

    ArrayList<Integer> neighbors(int node) {
        if (node >= 0 && node < vertices) {
            return new ArrayList<>(graph.get(node));
        }
        return new ArrayList<>();
    }

    void printGraph() {
        System.out.println("Adjacency List:");
        for (int i = 0; i < vertices; i++) {
            System.out.print(i + " -> ");
            for (int neighbor : graph.get(i)) {
                System.out.print(neighbor + " ");
            }
            System.out.println();
        }
    }

    boolean isValid(int src, int dest) {
        return src >= 0 && dest >= 0 && src < vertices && dest < vertices;
    }

    public static void main(String[] args) {
        ListGraph g = new ListGraph(5);
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(3, 4);
        g.addEdge(4, 0);

        g.removeEdge(0, 1);
        g.removeEdge(3, 4);

        System.out.println("Edge between 0 and 1? " + g.hasEdge(0, 1));
        System.out.println("Edge between 1 and 3? " + g.hasEdge(1, 3));

        g.printGraph();
    }
}


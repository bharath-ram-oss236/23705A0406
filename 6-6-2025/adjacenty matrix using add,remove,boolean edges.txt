public class Graph {
    public static void main(String[] args) {
        MyGraph g = new MyGraph(5);

        // First add edges
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(3, 4);
        g.addEdge(4, 0);

        // Now remove some edges
        g.removeEdge(0, 1);
        g.removeEdge(3, 4);

        // Check if an edge exists
        System.out.println("Edge between 0 and 1 exists? " + g.hasEdge(0, 1));
        System.out.println("Edge between 1 and 3 exists? " + g.hasEdge(1, 3));

        // Print the adjacency matrix
        g.printGraph();
    }
}

class MyGraph {
    int[][] graph;
    int vertices;

    MyGraph(int vertices) {
        this.vertices = vertices;
        graph = new int[vertices][vertices];
    }

    void addEdge(int src, int dest) {
        if (isValid(src, dest) && src != dest) {
            graph[src][dest] = 1;
            graph[dest][src] = 1;
        }
    }

    void removeEdge(int src, int dest) {
        if (isValid(src, dest)) {
            graph[src][dest] = 0;
            graph[dest][src] = 0;
        }
    }

    boolean hasEdge(int src, int dest) {
        if (isValid(src, dest)) {
            return graph[src][dest] == 1;
        }
        return false;
    }

    boolean isValid(int src, int dest) {
        return src >= 0 && dest >= 0 && src < vertices && dest < vertices;
    }

    void printGraph() {
        System.out.println("Adjacency Matrix:");
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                System.out.print(graph[i][j] + " ");
            }
            System.out.println();
        }
    }
}

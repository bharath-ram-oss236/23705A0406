public class Queue {
    // Inner static Node class
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Front and rear pointers
    private Node front = null;
    private Node rear = null;

    // Enqueue operation
    public void enqueue(int value) {
        Node newNode = new Node(value);
        if (rear == null) {
            front = rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
        System.out.println("Enqueued: " + value);
    }

    // Dequeue operation
    public void dequeue() {
        if (front == null) {
            System.out.println("Queue Underflow");
        } else {
            System.out.println("Dequeued: " + front.data);
            front = front.next;
            if (front == null) {
                rear = null;
            }
        }
    }

    // Peek operation
    public int peek() {
        if (front == null) {
            throw new RuntimeException("Queue is empty");
        }
        return front.data;
    }

    // Display queue
    public void display() {
        if (front == null) {
            System.out.println("Queue is empty.");
            return;
        }
        System.out.print("Queue from front to rear: ");
        Node temp = front;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    // Main method
    public static void main(String[] args) {
        Queue q = new Queue();
        int[] data = {20, 10, 40, 30, 50, 20};

        // Enqueue data
        for (int val : data) {
            q.enqueue(val);
        }

        // Display queue
        q.display();

        // Dequeue one element
        q.dequeue();

        // Display again
        q.display();
    }
}

